#!/usr/bin/env python
# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# A simple native messaging host. Shows a Tkinter dialog with incoming messages
# that also allows to send message back to the webapp.

from algorithm.bm25 import BM25
import simplejson as json
import struct
import sys
import threading

# Python 3 compatibility
if sys.version_info[0] < 3:
    import Queue
else:
    import queue as Queue


# Helper function that sends a message to the webapp.
def send_message(message):
    # Write message size.
    msg_size = struct.pack('I', len(message))
    msg_size = msg_size.decode(sys.stdout.encoding)

    sys.stdout.write(msg_size)

    # Write the message itself.
    sys.stdout.write(message)
    sys.stdout.flush()


# Thread that reads messages from the webapp.
def read_thread_func(queue):
    while 1:
        # Read the message length (first 4 bytes).
        text_length_bytes = sys.stdin.buffer.read(4)

        if len(text_length_bytes) == 0:
            if queue:
                queue.put(None)
            sys.exit(0)

        # Unpack message length as 4 byte integer.
        text_length = struct.unpack("i", text_length_bytes)[0]

        # Read the text (JSON object) of the message.
        text = sys.stdin.buffer.read(text_length).decode("utf-8")
        print(text, file=sys.stderr)

        lumber = BM25(100)
        para = json.loads(text)
        print(type(para), file=sys.stderr)
        res = lumber.rank(para['key'], para['doc'], 2)

        print(res, file=sys.stderr)
        print(text[res[0][0]:res[0][1]], file=sys.stderr)
        print(text[res[1][0]:res[1][1]], file=sys.stderr)
        # send_message('{"echo": %s}' % text)
        data = {"index": res}
        send_message(json.dumps(data))


def main():
    queue = Queue.Queue()

    thread = threading.Thread(target=read_thread_func, args=(queue, ))
    thread.daemon = True
    thread.start()

    # main_window.mainloop()
    while 1:
        continue
    sys.exit(0)


if __name__ == '__main__':
    # print("Where can I see this")
    main()
